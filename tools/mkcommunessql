#!/usr/bin/env python
import argparse
import json
from pathlib import Path


def _pg_escape(value: str) -> str:
    return value.replace("'", "\\'")


def _clean_codes_postaux(rows):
    result = []

    for row in rows:
        try:
            codes_postaux = row["codesPostaux"]
        except KeyError:
            codes_postaux = []

        result.append(
            {
                "codes_postaux": codes_postaux,
                **{k: v for k, v in row.items() if k != "codesPostaux"},
            }
        )

    return result


def _ensure_pk_unique(rows):
    """
    Some communes have 2 entries:
    - One entry with non-empty 'codesPostaux'
    - One entry with empty 'codesPostaux'
    Everything else being equal.
    The order of these 2 entries is not guaranteed.
    This function ensures only the copy with non-empty 'codesPostaux' is kept.
    This guarantees the unicity of (code, nom) which serves as the PK.
    """

    result = []

    has_codes_postaux = {}
    rows_with_empty_codes_postaux = {}

    for row in rows:
        pk = (row["code"], row["nom"])

        if pk in has_codes_postaux:
            if not has_codes_postaux[pk]:
                rows_with_empty_codes_postaux.pop(pk, None)
                result.append(row)
            continue

        if row["codes_postaux"]:
            result.append(row)
            has_codes_postaux[pk] = True
        else:
            rows_with_empty_codes_postaux[pk] = row
            has_codes_postaux[pk] = False

    for row in rows_with_empty_codes_postaux.values():
        result.append(row)

    return result


def main(input_path: Path, output_path: Path):
    rows = json.loads(input_path.read_text())
    rows = _clean_codes_postaux(rows)
    rows = _ensure_pk_unique(rows)

    values_tuples = []

    for row in rows:
        code = row["code"]
        nom = _pg_escape(row["nom"])
        departement = row["departement"]
        region = row["region"]
        codes_postaux = row["codes_postaux"]

        codes_postaux_value = (
            f"ARRAY[{', '.join(codes_postaux)}]"
            if codes_postaux
            else "ARRAY[]::VARCHAR(5)[]"
        )

        values_tuples.append(
            f"('{code}', E'{nom}', '{departement}', '{region}', {codes_postaux_value})"
        )

    statements = []
    statements.append("DELETE FROM data_communes")
    statements.append(
        "\n".join(
            [
                "INSERT INTO data_communes",
                "(code, nom, departement, region, codes_postaux)",
                "VALUES",
                ",\n".join(values_tuples),
            ]
        )
    )
    sql = ";\n".join(statements) + ";\n"

    output_path.write_text(sql)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("input_path", type=Path)
    parser.add_argument("output_path", type=Path)
    args = parser.parse_args()

    main(args.input_path, args.output_path)
