#!/usr/bin/env python3
import argparse
import shlex
import subprocess
import sys
from contextlib import contextmanager
from urllib.parse import urlparse, urlunparse


def _get_output(command):
    result = subprocess.run(command, capture_output=True)

    if result.returncode:
        raise RuntimeError(
            f"command {shlex.join(command)!r} "
            f"returned non-zero exit status {result.returncode}.\n"
            f"stdout: {result.stdout.decode()}"
            f"stderr: {result.stderr.decode()}"
        )

    out = result.stdout.decode().strip()

    if not out:
        raise RuntimeError(
            f"command {shlex.join(command)!r} returned empty output.\n"
            f"stderr: {result.stderr.decode()}"
        )

    return out


@contextmanager
def _popen_terminate_on_exit(*args, **kwargs):
    with subprocess.Popen(*args, **kwargs) as proc:
        try:
            yield proc
        finally:
            proc.terminate()


def main(
    app: str,
    port: int,
    host_url: bool = False,
):
    # Ensure Scalingo CLI is authenticated
    result = subprocess.run(["scalingo", "whoami"], capture_output=True)
    if result.returncode:
        result = subprocess.run(["scalingo", "login", "--ssh"], capture_output=True)
        if result.returncode:
            print("ERROR: not authenticated and failed to run 'scalingo login --ssh'")
            print(
                "HINT: https://doc.scalingo.com/platform/getting-started/first-steps#ssh-key-setup"
            )
            return 1
        print(result.stdout.decode())

    # 1) Forward Scalingo -> host.

    # https://doc.scalingo.com/platform/databases/access#encrypted-tunnel
    db_tunnel_command = [
        "scalingo",
        "--app",
        app,
        "db-tunnel",
        "-p",
        str(port),
        "DATABASE_URL",
    ]

    with _popen_terminate_on_exit(
        db_tunnel_command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL
    ) as db_tunnel_proc:
        # 2) Forward host -> Docker.
        # This allows PHP/Doctrine container to access the Scalingo database.

        username = _get_output(["whoami"])

        # https://stackoverflow.com/a/55224655
        docker_bridge_ip = _get_output(
            [
                "docker",
                "network",
                "inspect",
                "bridge",
                "--format={{(index .IPAM.Config 0).Gateway}}",
            ]
        )
        docker_tunnel_origin = f"{docker_bridge_ip}:{port}"

        # https://stackoverflow.com/a/52120176
        docker_tunnel_command = [
            "ssh",
            "-N",
            "-L",
            f"{docker_tunnel_origin}:127.0.0.1:{port}",
            f"{username}@localhost",
        ]

        with _popen_terminate_on_exit(docker_tunnel_command):
            # The tunnel database URL uses the same credentials, so we grab them
            # from the configured DATABASE_URL.
            database_url = urlparse(
                _get_output(["scalingo", "--app", app, "env-get", "DATABASE_URL"])
            )

            # DB tunnel is always available on localhost, so we can show either.
            displayed_origin = f"127.0.0.1:{port}" if host_url else docker_tunnel_origin

            db_tunnel_database_url = database_url._replace(
                netloc=f"{database_url.username}:{database_url.password}@{displayed_origin}"
            )

            print(urlunparse(db_tunnel_database_url))

            try:
                db_tunnel_proc.wait()
            except KeyboardInterrupt:
                pass

    return 0


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("app", help="Name of the Scalingo application")
    parser.add_argument(
        "--port",
        type=int,
        default=10000,
        help="Port of the SSH tunnel (default: 10000)",
    )
    parser.add_argument(
        "--host-url",
        action="store_true",
        help="Show URL of the tunnel on the host, not Docker",
    )

    args = parser.parse_args()

    sys.exit(main(args.app, args.port, host_url=args.host_url))
