const path = require('path');
const glob = require('glob');
const Dotenv = require('dotenv');
const Encore = require('@symfony/webpack-encore');
const { PurgeCSSPlugin } = require('purgecss-webpack-plugin');

// Manually configure the runtime environment if not already configured yet by the "encore" command.
// It's useful when you use tools that rely on webpack.config.js file.
if (!Encore.isRuntimeEnvironmentConfigured()) {
    Encore.configureRuntimeEnvironment(process.env.NODE_ENV || 'dev');
}

Encore
    // directory where compiled assets will be stored
    .setOutputPath('public/build/')
    .setPublicPath('/build')
    .copyFiles({
        from: './node_modules/@gouvfr/dsfr/dist/',
        pattern: /(dsfr.(no)?module.min.js)|(favicon\/)/,
        to: 'dsfr/[path][name].[ext]'
    })

    /*
     * ENTRY CONFIG
     *
     * Each entry will result in one JavaScript file (e.g. app.js)
     * and one CSS file (e.g. app.css) if your JavaScript imports CSS.
     */
    .addEntry('app', './assets/app.js')

    // enables the Symfony UX Stimulus bridge (used in assets/bootstrap.js)
    .enableStimulusBridge('./assets/controllers.json')

    // When enabled, Webpack "splits" your files into smaller pieces for greater optimization.
    .splitEntryChunks()

    // will require an extra script tag for runtime.js
    // but, you probably want this, unless you're building a single-page app
    .enableSingleRuntimeChunk()

    /*
     * FEATURE CONFIG
     *
     * Enable & configure other features below. For a full
     * list of features, see:
     * https://symfony.com/doc/current/frontend.html#adding-more-features
     */
    .cleanupOutputBeforeBuild()
    .enableBuildNotifications()
    .enableSourceMaps(!Encore.isProduction())
    // enables hashed filenames (e.g. app.abc123.css)
    .enableVersioning(Encore.isProduction())

    // configure Babel
    // .configureBabel((config) => {
    //     config.plugins.push('@babel/a-babel-plugin');
    // })

    // enables and configure @babel/preset-env polyfills
    .configureBabelPresetEnv((config) => {
        config.useBuiltIns = 'usage';
        config.corejs = '3.23';
    })

    // enables Sass/SCSS support
    .enableSassLoader()

    // uncomment if you use TypeScript
    //.enableTypeScriptLoader()

    // uncomment if you use React
    //.enableReactPreset()

    // uncomment to get integrity="..." attributes on your script & link tags
    // requires WebpackEncoreBundle 1.4 or higher
    //.enableIntegrityHashes(Encore.isProduction())

    // uncomment if you're having problems with a jQuery plugin
    //.autoProvidejQuery()

    // Configure PurgeCSS
    .addPlugin(new PurgeCSSPlugin({
        paths: glob.sync(path.join(__dirname, 'templates', '**', '*'), { nodir: true }),
        safelist: {
            standard: [
                // Only generated by Symfony
                'textarea',
                'select',
                // Dynamic classes
                /^fr-icon-x-/,
                /^fr-modal--/,
            ],
            greedy: [
                // Source of complex selectors
                /input/,
            ]
        }
    }))

    .configureDefinePlugin((options) => {
        // Expose certain environment variables as process.env.* in client-side JS code.
        // Inspired by: https://github.com/symfony/webpack-encore/issues/567#issuecomment-1339010091
        const env = Dotenv.config();

        if (env.error) {
            throw env.error;
        }

        const variables = [
            'MATOMO_ENABLED',
        ];

        variables.forEach((key) => {
            if (process.env[key] !== undefined) {
                options[`process.env.${key}`] = JSON.stringify(process.env[key]);
            }
        });
    })
;

module.exports = Encore.getWebpackConfig();
